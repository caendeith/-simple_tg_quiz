from aiogram import Router, types
from aiogram import F
from database import update_quiz_index, get_quiz_index, save_quiz_result
from quiz_data import quiz_data
from keyboards import generate_options_keyboard

router = Router()

@router.callback_query(F.data.startswith("answer_"))
async def answer_handler(callback: types.CallbackQuery):
    await callback.bot.edit_message_reply_markup(
        chat_id=callback.from_user.id,
        message_id=callback.message.message_id,
        reply_markup=None
    )
    
    user_id = callback.from_user.id
    current_index = await get_quiz_index(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç
    current_state = await get_quiz_state(user_id)
    current_score = current_state['score'] if current_state else 0
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –æ—Ç–≤–µ—Ç–∞
    selected_index = int(callback.data.split("_")[1])
    selected_option = quiz_data[current_index]['options'][selected_index]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    correct_index = quiz_data[current_index]['correct_option']
    correct_option = quiz_data[current_index]['options'][correct_index]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç
    is_correct = selected_index == correct_index
    if is_correct:
        current_score += 1
        await update_quiz_state(user_id, {'score': current_score})
        response_text = (
            f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{selected_option}</b>\n"
            "–≠—Ç–æ <u>–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π</u> –æ—Ç–≤–µ—Ç!"
        )
    else:
        response_text = (
            f"‚ùå –í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{selected_option}</b>\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_option}</b>"
        )
    
    await callback.message.answer(response_text, parse_mode="HTML")
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    current_index += 1
    await update_quiz_index(user_id, current_index)
    
    if current_index < len(quiz_data):
        await get_question(callback.message, user_id)
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–≤–∏–∑–∞
        username = callback.from_user.username
        full_name = callback.from_user.full_name
        await save_quiz_result(
            user_id, 
            f"@{username}" if username else "N/A", 
            full_name, 
            current_score, 
            len(quiz_data)
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result_text = (
            f"üèÜ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
            f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <b>{current_score}/{len(quiz_data)}</b>\n"
            f"–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: <b>{(current_score/len(quiz_data)*100):.1f}%</b>\n\n"
            f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats"
        )
        await callback.message.answer(result_text, parse_mode="HTML")

async def get_question(message: types.Message, user_id: int):
    current_index = await get_quiz_index(user_id)
    question = quiz_data[current_index]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç
    current_state = await get_quiz_state(user_id)
    current_score = current_state['score'] if current_state else 0
    
    question_text = (
        f"–í–æ–ø—Ä–æ—Å {current_index + 1}/{len(quiz_data)}\n"
        f"–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: {current_score}\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"{question['question']}"
    )
    
    await message.answer(
        question_text,
        reply_markup=generate_options_keyboard(question['options'])
    )

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ Redis –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
user_states = {}

async def get_quiz_state(user_id):
    return user_states.get(user_id)

async def update_quiz_state(user_id, state):
    user_states[user_id] = state

async def reset_quiz_state(user_id):
    if user_id in user_states:
        del user_states[user_id]